services:
  VideoProcessingService:
    image: ghcr.io/maxaizer/video-processing-service:latest
    build:
      context: .
      dockerfile: src/VideoProcessingService/VideoProcessingService.App/Dockerfile
    environment:
      MINIO__ENDPOINT: ${MINIO_ENDPOINT}
      MINIO__AccessKey: ${MINIO_ROOT_USER}
      MINIO__SecretKey: ${MINIO_ROOT_PASSWORD}
      MINIO__BucketName: ${MINIO_BUCKET}
      MINIO__TmpFolder: ${MINIO_TMP_FOLDER}
      MINIO__PublicFolder: ${MINIO_PUBLIC_FOLDER}
      MessageBroker__HOST: rabbitmq
      MessageBroker__USERNAME: ${RABBITMQ_USER}
      MessageBroker__PASSWORD: ${RABBITMQ_PASSWORD}
      DB_CONNECTION_STRING: "Server=db;Port=5432;Database=${POSTGRES_DB};User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};"
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT}
      CONVERSION__ResolutionsJson: ${RESOLUTIONS_JSON}
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      replicas: 1
  
  CoreService:
    image: ghcr.io/maxaizer/video-core-service:latest
    build:
      context: .
      dockerfile: src/CoreService/CoreService.Api/Dockerfile
    environment:
      MINIO__ENDPOINT: ${MINIO_ENDPOINT}
      MINIO__PublicUrl: ${MINIO_PUBLIC_URL}
      MINIO__AccessKey: ${MINIO_ROOT_USER}
      MINIO__SecretKey: ${MINIO_ROOT_PASSWORD}
      MINIO__BucketName: ${MINIO_BUCKET}
      MINIO__TmpFolder: ${MINIO_TMP_FOLDER}
      MessageBroker__HOST: rabbitmq
      MessageBroker__USERNAME: ${RABBITMQ_USER}
      MessageBroker__PASSWORD: ${RABBITMQ_PASSWORD}
      DB_CONNECTION_STRING: "Server=db;Port=5432;Database=${POSTGRES_DB};User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};"   
      JWT__ISSUER: ${JWT_ISSUER}
      JWT__AUDIENCE: ${JWT_AUDIENCE}
      JWT__AccessLifetime: ${JWT_ACCESS_LIFETIME}
      JWT__RefreshLifetime: ${JWT_REFRESH_LIFETIME}
      JWT__SECRET: ${JWT_SECRET}
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT}
      ASPNETCORE_HTTP_PORTS: 8080
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./.aspnet/https:/https:ro
 
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      BUCKET_NAME: ${MINIO_BUCKET}
      TMP_FOLDER: ${MINIO_TMP_FOLDER}
      PUBLIC_FOLDER: ${MINIO_PUBLIC_FOLDER}
    volumes:
      - minio_data:/data
      - ./minio-setup.sh:/usr/local/bin/minio-setup.sh
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    entrypoint: ["/bin/sh", "/usr/local/bin/minio-setup.sh"]
    command: server --console-address ":9001" /data
    healthcheck:
      test: "/usr/bin/mc alias set myminio http://127.0.0.1:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && /usr/bin/mc ls myminio/${MINIO_BUCKET} || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:17-alpine
    environment:    
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:1.27.2-alpine
    ports:
      - "80:80"
      - "443:443"     
    depends_on:
      - minio
      - CoreService
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      #- /etc/letsencrypt:/etc/letsencrypt:ro
  
  rabbitmq:
    image: rabbitmq:3.13-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "127.0.0.1:5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  minio_data:
  pg_data:
  rabbitmq_data: